import requests
import json
import os

# --- Configuration ---
# Replace with your actual deployed Render URL
# This is based on your previous screenshot: https://jyooooo-hack.onrender.com
BASE_URL = "https://jyooooo-hack.onrender.com"

# Replace with your actual API key used for the HackRX endpoint
# This should match the API key you configured in your Render environment variables
# (e.g., "test-api-key" as shown in DEPLOYMENT.md example)
API_KEY = "test-api-key" # Use your actual API key here if you set one up

# --- Endpoints to Test ---
HEALTH_ENDPOINT = f"{BASE_URL}/health"
HACKRX_RUN_ENDPOINT = f"{BASE_URL}/hackrx/run"
CACHE_STATUS_ENDPOINT = f"{BASE_URL}/hackrx/cache/status"
CACHE_CLEAR_ENDPOINT = f"{BASE_URL}/hackrx/cache/clear"
HACKRX_NEW_FEATURE_ENDPOINT = f"{BASE_URL}/hackrx/new_feature" # New GET endpoint
HACKRX_ANOTHER_ENDPOINT = f"{BASE_URL}/hackrx/another_endpoint" # New POST endpoint

# --- Test Functions ---

def test_health_check():
    """Tests the /health endpoint."""
    print(f"\n--- Testing Health Check: GET {HEALTH_ENDPOINT} ---")
    try:
        response = requests.get(HEALTH_ENDPOINT)
        response.raise_for_status()  # Raise an exception for HTTP errors (4xx or 5xx)
        print(f"Status Code: {response.status_code}")
        print("Response Body:")
        print(json.dumps(response.json(), indent=2))
    except requests.exceptions.RequestException as e:
        print(f"Error testing health check: {e}")
    print("-" * 50)

def test_hackrx_run():
    """Tests the /hackrx/run endpoint with a sample document and questions."""
    print(f"\n--- Testing HackRX Run: POST {HACKRX_RUN_ENDPOINT} ---")

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {API_KEY}"
    }

    # Sample request body as provided in DEPLOYMENT.md
    payload = {
        "documents": "https://hackrx.blob.core.windows.net/assets/policy.pdf?sv=2023-01-03&st=2025-07-04T09%3A11%3A24Z&se=2027-07-05T09%3A11%3A00Z&sr=b&sp=r&sig=N4a9OU0w0QXO6AOIBiu4bpl7AXvEZogeT%2FjUHNO7HzQ%3D",
        "questions": [
            "What is the grace period for premium payment under the National Parivar Mediclaim Plus Policy?",
            "What is the waiting period for pre-existing diseases (PED) to be covered?",
            "Does the policy cover maternity expenses?",
            "What is the definition of a hospital according to the policy?"
        ]
    }

    try:
        print("Sending request...")
        response = requests.post(HACKRX_RUN_ENDPOINT, headers=headers, data=json.dumps(payload))
        response.raise_for_status()  # Raise an exception for HTTP errors (4xx or 5xx)

        print(f"Status Code: {response.status_code}")
        print("Response Body:")
        print(json.dumps(response.json(), indent=2))

    except requests.exceptions.RequestException as e:
        print(f"Error testing HackRX run: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print(f"Response status code: {e.response.status_code}")
            print(f"Response body: {e.response.text}")
    print("-" * 50)

def test_cache_status():
    """Tests the /hackrx/cache/status endpoint."""
    print(f"\n--- Testing Cache Status: GET {CACHE_STATUS_ENDPOINT} ---")
    headers = {
        "Authorization": f"Bearer {API_KEY}"
    }
    try:
        response = requests.get(CACHE_STATUS_ENDPOINT, headers=headers)
        response.raise_for_status()
        print(f"Status Code: {response.status_code}")
        print("Response Body:")
        print(json.dumps(response.json(), indent=2))
    except requests.exceptions.RequestException as e:
        print(f"Error testing cache status: {e}")
    print("-" * 50)

def test_clear_cache():
    """Tests the /hackrx/cache/clear endpoint."""
    print(f"\n--- Testing Clear Cache: POST {CACHE_CLEAR_ENDPOINT} ---")
    headers = {
        "Authorization": f"Bearer {API_KEY}"
    }
    try:
        response = requests.post(CACHE_CLEAR_ENDPOINT, headers=headers)
        response.raise_for_status()
        print(f"Status Code: {response.status_code}")
        print("Response Body:")
        print(json.dumps(response.json(), indent=2))
    except requests.exceptions.RequestException as e:
        print(f"Error testing clear cache: {e}")
    print("-" * 50)

def test_new_feature_endpoint():
    """Tests the new /hackrx/new_feature GET endpoint."""
    print(f"\n--- Testing New Feature Endpoint: GET {HACKRX_NEW_FEATURE_ENDPOINT} ---")
    try:
        # No Authorization header needed for this example GET endpoint
        response = requests.get(HACKRX_NEW_FEATURE_ENDPOINT)
        response.raise_for_status()
        print(f"Status Code: {response.status_code}")
        print("Response Body:")
        print(json.dumps(response.json(), indent=2))
    except requests.exceptions.RequestException as e:
        print(f"Error testing new feature endpoint: {e}")
    print("-" * 50)

def test_another_hackrx_endpoint():
    """Tests the new /hackrx/another_endpoint POST endpoint."""
    print(f"\n--- Testing Another HackRX Endpoint: POST {HACKRX_ANOTHER_ENDPOINT} ---")
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {API_KEY}" # Assuming this endpoint also requires auth
    }
    payload = {
        "message": "Hello from the test script!"
    }
    try:
        response = requests.post(HACKRX_ANOTHER_ENDPOINT, headers=headers, data=json.dumps(payload))
        response.raise_for_status()
        print(f"Status Code: {response.status_code}")
        print("Response Body:")
        print(json.dumps(response.json(), indent=2))
    except requests.exceptions.RequestException as e:
        print(f"Error testing another hackrx endpoint: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print(f"Response status code: {e.response.status_code}")
            print(f"Response body: {e.response.text}")
    print("-" * 50)

# --- Main Execution ---
if __name__ == "__main__":
    # You can comment out tests you don't want to run
    test_health_check()
    test_hackrx_run()
    test_cache_status()
    test_clear_cache()
    test_cache_status() # Check status again after clearing
    test_new_feature_endpoint() # Test the new GET endpoint
    test_another_hackrx_endpoint() # Test the new POST endpoint
